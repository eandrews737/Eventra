// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  passwordHash  String
  fullName      String
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  createdEvents Event[]        @relation("EventCreator")
  participations EventParticipant[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Event {
  id              Int                @id @default(autoincrement())
  name            String
  description     String
  startDatetime   DateTime           @map("start_datetime")
  endDatetime     DateTime           @map("end_datetime")
  location        String
  minAttendees    Int?               @map("min_attendees")
  maxAttendees    Int?               @map("max_attendees")
  locationDetails String?            @map("location_details")
  preparationInfo String?            @map("preparation_info")
  createdBy       Int                @map("created_by")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  creator         User               @relation("EventCreator", fields: [createdBy], references: [id])
  participants    EventParticipant[]

  @@map("events")
}

model GuestUser {
  id            Int                @id @default(autoincrement())
  email         String
  fullName      String             @map("full_name")
  createdAt     DateTime           @default(now()) @map("created_at")
  participations EventParticipant[]

  @@map("guest_users")
}

model EventParticipant {
  id        Int       @id @default(autoincrement())
  eventId   Int       @map("event_id")
  userId    Int?      @map("user_id")
  guestId   Int?      @map("guest_id")
  status    String    @default("pending")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  event     Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  guest     GuestUser? @relation(fields: [guestId], references: [id], onDelete: Cascade)

  @@map("event_participants")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
